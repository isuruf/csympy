version: '{build}'

# Uncomment this to enable the fast build environment if your account does not
# support it automatically:
#os: Visual Studio 2015 RC

environment:
  global:
    PLATFORMTOOLSET: "v140"
    PLATFORM: "Win32"

  matrix:
    - BUILD_TYPE: "Debug"
      COMPILER: MinGW
      WITH_PYTHON: yes
      WITH_MPC: yes
    - BUILD_TYPE: "Debug"
      COMPILER: MinGW
      WITH_MPFR: yes
    - BUILD_TYPE: "Release"
      COMPILER: MinGW
    - BUILD_TYPE: "Debug"
      COMPILER: MSVC15

install:
- if [%COMPILER%]==[MSVC15] set PATH=C:\Program Files (x86)\MSBuild\14.0\Bin;%PATH%
- if [%COMPILER%]==[MSVC15] appveyor DownloadFile http://mpir.org/mpir-2.7.0.zip
- if [%COMPILER%]==[MSVC15] 7z x mpir-2.7.0.zip > NUL
- if [%COMPILER%]==[MSVC15] set PATH=C:\Program Files (x86)\MSBuild\14.0\Bin;%PATH%
- if [%COMPILER%]==[MSVC15] msbuild mpir-2.7.0/build.vc14/lib_mpir_gc/lib_mpir_gc.vcxproj /p:Configuration=Debug /p:Platform=%PLATFORM% /p:PlatformToolset=%PLATFORMTOOLSET% /verbosity:normal
- if [%COMPILER%]==[MSVC15] msbuild mpir-2.7.0/build.vc14/lib_mpir_cxx/lib_mpir_cxx.vcxproj /p:Configuration=Debug /p:Platform=%PLATFORM% /p:PlatformToolset=%PLATFORMTOOLSET% /verbosity:normal
- if [%COMPILER%]==[MSVC15] copy mpir-2.7.0\build.vc14\lib_mpir_gc\%PLATFORM%\Debug\mpir.lib mpir-2.7.0\build.vc14\lib_mpir_gc\%PLATFORM%\Debug\gmp.lib
- if [%COMPILER%]==[MSVC15] copy mpir-2.7.0\build.vc14\lib_mpir_cxx\%PLATFORM%\Debug\mpirxx.lib mpir-2.7.0\build.vc14\lib_mpir_cxx\%PLATFORM%\Debug\gmpxx.lib

- if [%COMPILER%]==[MinGW] set PATH=C:\MinGW\bin;%PATH%
- if [%COMPILER%]==[MinGW] mingw-get update
- if [%COMPILER%]==[MinGW] rename "C:\Program Files (x86)\Git\bin\sh.exe" "sh2.exe"
- if [%COMPILER%]==[MinGW] mingw-get install mingw32-gmp
- if [%COMPILER%]==[MinGW] if [%WITH_MPFR%]==[yes] mingw-get install mingw32-mpfr
- if [%COMPILER%]==[MinGW] if [%WITH_MPC%]==[yes] mingw-get install mingw32-mpfr
- if [%COMPILER%]==[MinGW] if [%WITH_MPC%]==[yes] mingw-get install mingw32-mpc

- if [%WITH_PYTHON%]==[yes] set PATH=C:\Python27\Scripts;%PATH%
- if [%WITH_PYTHON%]==[yes] pip install cython nose

build_script:
- mkdir build
- cd build
- set cmake_line="-DCMAKE_BUILD_TYPE=%BUILD_TYPE%"
- if [%WITH_PYTHON%]==[yes] set cmake_line="%cmake_line% -DWITH_PYTHON=yes"
- if [%WITH_MPFR%]==[yes] set cmake_line="%cmake_line% -DWITH_MPFR=yes"
- if [%WITH_MPC%]==[yes] set cmake_line="%cmake_line% -DWITH_MPC=yes"

- if [%COMPILER%]==[MSVC15] cmake -G "Visual Studio 14 2015" -DGMP_DIR=mpir-2.7.0/lib/%PLATFORM%/Debug;mpir-2.7.0/build.vc14/lib_mpir_gc/%PLATFORM%/Debug;mpir-2.7.0/build.vc14/lib_mpir_cxx/%PLATFORM%/Debug -DCMAKE_CXX_FLAGS_DEBUG="/D_DEBUG /MTd /Zi /Ob0 /Od /RTC1 /W1" ..
- if [%COMPILER%]==[MinGW] cmake -G "MinGW Makefiles" -DCOMMON_DIR=C:\MinGW ..
- if [%WITH_PYTHON%]==[yes] cmake -DWITH_PYTHON=yes ..
- if [%WITH_MPFR%]==[yes] cmake -DWITH_MPFR=yes ..
- if [%WITH_MPC%]==[yes] cmake -DWITH_MPC=yes ..
- cmake --build . --config %BUILD_TYPE%

- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

test_script:
- ctest --output-on-failure

# Enable this to be able to login to the build worker. You can use the
# `remmina` program in Ubuntu, use the login information that the line below
# prints into the log.
#on_finish:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
